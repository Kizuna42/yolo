---
alwaysApply: true
description: 人物検出PoC実装計画書に基づく開発ルール
---

# 人物検出 PoC 実装開発ルール

## 基本原則

毎回、[人物検出 PoC 実装計画書.md](mdc:docs/人物検出PoC実装計画書.md) を参照して実装計画書に沿って実装すること。

## 実装フロー

### 1. 計画書参照

- 実装前に必ず [人物検出 PoC 実装計画書.md](mdc:docs/人物検出PoC実装計画書.md) を確認
- 現在のフェーズとタスクを把握
- チェックリストの進捗状況を確認

### 2. フェーズ別実装

- **フェーズ 1**: 環境構築・基盤準備（2 日間）
- **フェーズ 2**: データ前処理・分析（3 日間）
- **フェーズ 3**: モデル実装・検証（4 日間）
- **フェーズ 4**: 性能評価・最適化（3 日間）
- **フェーズ 5**: 統合・最終検証（2 日間）

### 3. チェックリスト管理

- フェーズごとに実装を完了したら、チェックリストを完了（✅）にすること
- 計画書内のチェックボックス `- [ ]` を `- [x]` に更新
- 完了したタスクは明確にマーク

### 4. 品質管理

- 定期的に Lint してフォーマット整理
- コード品質チェック（可読性、保守性）
- エラーハンドリングの実装確認
- ログ出力機能の動作確認

### 5. バージョン管理

- Lint & フォーマット完了後 → git commit
- 適切なコミットメッセージで変更を記録
- PR 作成でコードレビューを実施

## 技術要件

### 環境

- macOS (MacBook Pro M1 Max)
- Python 3.8+
- 64GB RAM
- Apple M1 Max 最適化

### 主要ライブラリ

- ultralytics (YOLOv11)
- OpenCV
- PyTorch (Apple Silicon 対応)
- pytesseract, easyocr
- FFmpeg

### 成功基準

- タイムスタンプ OCR 認識精度: 99%以上
- 時刻指定フレーム抽出精度: ±10 秒以内
- 人物検出精度: 90%以上
- False Positive 率: 10%以下
- False Negative 率: 5%以下

## プロジェクト構造

```
yolo/
├── input/                 # 入力動画ファイル
├── output/               # 出力結果
│   ├── frames/           # 抽出フレーム
│   ├── timestamps/       # タイムスタンプ抽出結果
│   ├── detections/       # 人物検出結果
│   └── results/          # 最終結果・レポート
├── models/               # 学習済みモデル
├── src/                  # ソースコード
│   ├── ocr/             # タイムスタンプOCR処理
│   ├── extraction/      # フレーム抽出処理
│   ├── detection/       # 人物検出処理
│   ├── evaluation/      # 評価システム
│   └── utils/           # ユーティリティ
├── config/              # 設定ファイル
├── tests/               # テストコード
└── docs/                # ドキュメント
```

## 実装時の注意事項

1. **段階的実装**: 各フェーズを順序立てて実装
2. **テスト駆動**: 各モジュールの単体テストを実施
3. **ドキュメント**: 実装と同時にドキュメント更新
4. **パフォーマンス**: Apple M1 Max での最適化を考慮
5. **エラーハンドリング**: 異常系の処理を適切に実装
